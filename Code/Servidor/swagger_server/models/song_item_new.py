# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SongItemNew(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, lenght: str=None, author_id: str=None, album_id: str=None, genre: List[str]=None):  # noqa: E501
        """SongItemNew - a model defined in Swagger

        :param name: The name of this SongItemNew.  # noqa: E501
        :type name: str
        :param lenght: The lenght of this SongItemNew.  # noqa: E501
        :type lenght: str
        :param author_id: The author_id of this SongItemNew.  # noqa: E501
        :type author_id: str
        :param album_id: The album_id of this SongItemNew.  # noqa: E501
        :type album_id: str
        :param genre: The genre of this SongItemNew.  # noqa: E501
        :type genre: List[str]
        """
        self.swagger_types = {
            'name': str,
            'lenght': str,
            'author_id': str,
            'album_id': str,
            'genre': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'lenght': 'lenght',
            'author_id': 'authorID',
            'album_id': 'albumID',
            'genre': 'genre'
        }

        self._name = name
        self._lenght = lenght
        self._author_id = author_id
        self._album_id = album_id
        self._genre = genre

    @classmethod
    def from_dict(cls, dikt) -> 'SongItemNew':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SongItemNew of this SongItemNew.  # noqa: E501
        :rtype: SongItemNew
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this SongItemNew.


        :return: The name of this SongItemNew.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SongItemNew.


        :param name: The name of this SongItemNew.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def lenght(self) -> str:
        """Gets the lenght of this SongItemNew.


        :return: The lenght of this SongItemNew.
        :rtype: str
        """
        return self._lenght

    @lenght.setter
    def lenght(self, lenght: str):
        """Sets the lenght of this SongItemNew.


        :param lenght: The lenght of this SongItemNew.
        :type lenght: str
        """
        if lenght is None:
            raise ValueError("Invalid value for `lenght`, must not be `None`")  # noqa: E501

        self._lenght = lenght

    @property
    def author_id(self) -> str:
        """Gets the author_id of this SongItemNew.


        :return: The author_id of this SongItemNew.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this SongItemNew.


        :param author_id: The author_id of this SongItemNew.
        :type author_id: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def album_id(self) -> str:
        """Gets the album_id of this SongItemNew.


        :return: The album_id of this SongItemNew.
        :rtype: str
        """
        return self._album_id

    @album_id.setter
    def album_id(self, album_id: str):
        """Sets the album_id of this SongItemNew.


        :param album_id: The album_id of this SongItemNew.
        :type album_id: str
        """
        if album_id is None:
            raise ValueError("Invalid value for `album_id`, must not be `None`")  # noqa: E501

        self._album_id = album_id

    @property
    def genre(self) -> List[str]:
        """Gets the genre of this SongItemNew.


        :return: The genre of this SongItemNew.
        :rtype: List[str]
        """
        return self._genre

    @genre.setter
    def genre(self, genre: List[str]):
        """Sets the genre of this SongItemNew.


        :param genre: The genre of this SongItemNew.
        :type genre: List[str]
        """
        if genre is None:
            raise ValueError("Invalid value for `genre`, must not be `None`")  # noqa: E501

        self._genre = genre
