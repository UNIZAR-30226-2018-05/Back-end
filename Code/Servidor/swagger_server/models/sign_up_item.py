# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SignUpItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, name: str=None, mail: str=None, _pass: str=None):  # noqa: E501
        """SignUpItem - a model defined in Swagger

        :param username: The username of this SignUpItem.  # noqa: E501
        :type username: str
        :param name: The name of this SignUpItem.  # noqa: E501
        :type name: str
        :param mail: The mail of this SignUpItem.  # noqa: E501
        :type mail: str
        :param _pass: The _pass of this SignUpItem.  # noqa: E501
        :type _pass: str
        """
        self.swagger_types = {
            'username': str,
            'name': str,
            'mail': str,
            '_pass': str
        }

        self.attribute_map = {
            'username': 'username',
            'name': 'name',
            'mail': 'mail',
            '_pass': 'pass'
        }

        self._username = username
        self._name = name
        self._mail = mail
        self.__pass = _pass

    @classmethod
    def from_dict(cls, dikt) -> 'SignUpItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SignUpItem of this SignUpItem.  # noqa: E501
        :rtype: SignUpItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this SignUpItem.


        :return: The username of this SignUpItem.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this SignUpItem.


        :param username: The username of this SignUpItem.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def name(self) -> str:
        """Gets the name of this SignUpItem.


        :return: The name of this SignUpItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SignUpItem.


        :param name: The name of this SignUpItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def mail(self) -> str:
        """Gets the mail of this SignUpItem.


        :return: The mail of this SignUpItem.
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail: str):
        """Sets the mail of this SignUpItem.


        :param mail: The mail of this SignUpItem.
        :type mail: str
        """
        if mail is None:
            raise ValueError("Invalid value for `mail`, must not be `None`")  # noqa: E501

        self._mail = mail

    @property
    def _pass(self) -> str:
        """Gets the _pass of this SignUpItem.


        :return: The _pass of this SignUpItem.
        :rtype: str
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass: str):
        """Sets the _pass of this SignUpItem.


        :param _pass: The _pass of this SignUpItem.
        :type _pass: str
        """
        if _pass is None:
            raise ValueError("Invalid value for `_pass`, must not be `None`")  # noqa: E501

        self.__pass = _pass
