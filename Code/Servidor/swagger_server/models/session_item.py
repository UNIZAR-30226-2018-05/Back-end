# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SessionItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, playlist_id: str=None, song_id: str=None, second: str=None):  # noqa: E501
        """SessionItem - a model defined in Swagger

        :param playlist_id: The playlist_id of this SessionItem.  # noqa: E501
        :type playlist_id: str
        :param song_id: The song_id of this SessionItem.  # noqa: E501
        :type song_id: str
        :param second: The second of this SessionItem.  # noqa: E501
        :type second: str
        """
        self.swagger_types = {
            'playlist_id': str,
            'song_id': str,
            'second': str
        }

        self.attribute_map = {
            'playlist_id': 'playlistID',
            'song_id': 'songID',
            'second': 'second'
        }

        self._playlist_id = playlist_id
        self._song_id = song_id
        self._second = second

    @classmethod
    def from_dict(cls, dikt) -> 'SessionItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SessionItem of this SessionItem.  # noqa: E501
        :rtype: SessionItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def playlist_id(self) -> str:
        """Gets the playlist_id of this SessionItem.


        :return: The playlist_id of this SessionItem.
        :rtype: str
        """
        return self._playlist_id

    @playlist_id.setter
    def playlist_id(self, playlist_id: str):
        """Sets the playlist_id of this SessionItem.


        :param playlist_id: The playlist_id of this SessionItem.
        :type playlist_id: str
        """
        if playlist_id is None:
            raise ValueError("Invalid value for `playlist_id`, must not be `None`")  # noqa: E501

        self._playlist_id = playlist_id

    @property
    def song_id(self) -> str:
        """Gets the song_id of this SessionItem.


        :return: The song_id of this SessionItem.
        :rtype: str
        """
        return self._song_id

    @song_id.setter
    def song_id(self, song_id: str):
        """Sets the song_id of this SessionItem.


        :param song_id: The song_id of this SessionItem.
        :type song_id: str
        """
        if song_id is None:
            raise ValueError("Invalid value for `song_id`, must not be `None`")  # noqa: E501

        self._song_id = song_id

    @property
    def second(self) -> str:
        """Gets the second of this SessionItem.


        :return: The second of this SessionItem.
        :rtype: str
        """
        return self._second

    @second.setter
    def second(self, second: str):
        """Sets the second of this SessionItem.


        :param second: The second of this SessionItem.
        :type second: str
        """
        if second is None:
            raise ValueError("Invalid value for `second`, must not be `None`")  # noqa: E501

        self._second = second
