# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.friend_item import FriendItem  # noqa: F401,E501
from swagger_server.models.playlist_item import PlaylistItem  # noqa: F401,E501
from swagger_server import util


class ProfileItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, username: str=None, name: str=None, bio: str=None, friends: List[FriendItem]=None, playlists: List[PlaylistItem]=None):  # noqa: E501
        """ProfileItem - a model defined in Swagger

        :param id: The id of this ProfileItem.  # noqa: E501
        :type id: str
        :param username: The username of this ProfileItem.  # noqa: E501
        :type username: str
        :param name: The name of this ProfileItem.  # noqa: E501
        :type name: str
        :param bio: The bio of this ProfileItem.  # noqa: E501
        :type bio: str
        :param friends: The friends of this ProfileItem.  # noqa: E501
        :type friends: List[FriendItem]
        :param playlists: The playlists of this ProfileItem.  # noqa: E501
        :type playlists: List[PlaylistItem]
        """
        self.swagger_types = {
            'id': str,
            'username': str,
            'name': str,
            'bio': str,
            'friends': List[FriendItem],
            'playlists': List[PlaylistItem]
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'name': 'name',
            'bio': 'bio',
            'friends': 'friends',
            'playlists': 'playlists'
        }

        self._id = id
        self._username = username
        self._name = name
        self._bio = bio
        self._friends = friends
        self._playlists = playlists

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProfileItem of this ProfileItem.  # noqa: E501
        :rtype: ProfileItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ProfileItem.


        :return: The id of this ProfileItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ProfileItem.


        :param id: The id of this ProfileItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this ProfileItem.


        :return: The username of this ProfileItem.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this ProfileItem.


        :param username: The username of this ProfileItem.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def name(self) -> str:
        """Gets the name of this ProfileItem.


        :return: The name of this ProfileItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProfileItem.


        :param name: The name of this ProfileItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def bio(self) -> str:
        """Gets the bio of this ProfileItem.


        :return: The bio of this ProfileItem.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio: str):
        """Sets the bio of this ProfileItem.


        :param bio: The bio of this ProfileItem.
        :type bio: str
        """
        if bio is None:
            raise ValueError("Invalid value for `bio`, must not be `None`")  # noqa: E501

        self._bio = bio

    @property
    def friends(self) -> List[FriendItem]:
        """Gets the friends of this ProfileItem.


        :return: The friends of this ProfileItem.
        :rtype: List[FriendItem]
        """
        return self._friends

    @friends.setter
    def friends(self, friends: List[FriendItem]):
        """Sets the friends of this ProfileItem.


        :param friends: The friends of this ProfileItem.
        :type friends: List[FriendItem]
        """
        if friends is None:
            raise ValueError("Invalid value for `friends`, must not be `None`")  # noqa: E501

        self._friends = friends

    @property
    def playlists(self) -> List[PlaylistItem]:
        """Gets the playlists of this ProfileItem.


        :return: The playlists of this ProfileItem.
        :rtype: List[PlaylistItem]
        """
        return self._playlists

    @playlists.setter
    def playlists(self, playlists: List[PlaylistItem]):
        """Sets the playlists of this ProfileItem.


        :param playlists: The playlists of this ProfileItem.
        :type playlists: List[PlaylistItem]
        """
        if playlists is None:
            raise ValueError("Invalid value for `playlists`, must not be `None`")  # noqa: E501

        self._playlists = playlists
