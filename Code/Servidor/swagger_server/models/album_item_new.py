# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AlbumItemNew(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, author_id: str=None, publish_date: date=None, description: str=None):  # noqa: E501
        """AlbumItemNew - a model defined in Swagger

        :param name: The name of this AlbumItemNew.  # noqa: E501
        :type name: str
        :param author_id: The author_id of this AlbumItemNew.  # noqa: E501
        :type author_id: str
        :param publish_date: The publish_date of this AlbumItemNew.  # noqa: E501
        :type publish_date: date
        :param description: The description of this AlbumItemNew.  # noqa: E501
        :type description: str
        """
        self.swagger_types = {
            'name': str,
            'author_id': str,
            'publish_date': date,
            'description': str
        }

        self.attribute_map = {
            'name': 'name',
            'author_id': 'authorID',
            'publish_date': 'publishDate',
            'description': 'description'
        }

        self._name = name
        self._author_id = author_id
        self._publish_date = publish_date
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'AlbumItemNew':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlbumItemNew of this AlbumItemNew.  # noqa: E501
        :rtype: AlbumItemNew
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this AlbumItemNew.


        :return: The name of this AlbumItemNew.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AlbumItemNew.


        :param name: The name of this AlbumItemNew.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def author_id(self) -> str:
        """Gets the author_id of this AlbumItemNew.


        :return: The author_id of this AlbumItemNew.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this AlbumItemNew.


        :param author_id: The author_id of this AlbumItemNew.
        :type author_id: str
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def publish_date(self) -> date:
        """Gets the publish_date of this AlbumItemNew.


        :return: The publish_date of this AlbumItemNew.
        :rtype: date
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date: date):
        """Sets the publish_date of this AlbumItemNew.


        :param publish_date: The publish_date of this AlbumItemNew.
        :type publish_date: date
        """
        if publish_date is None:
            raise ValueError("Invalid value for `publish_date`, must not be `None`")  # noqa: E501

        self._publish_date = publish_date

    @property
    def description(self) -> str:
        """Gets the description of this AlbumItemNew.


        :return: The description of this AlbumItemNew.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this AlbumItemNew.


        :param description: The description of this AlbumItemNew.
        :type description: str
        """

        self._description = description
