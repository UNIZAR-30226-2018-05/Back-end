# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.song_item import SongItem  # noqa: F401,E501
from swagger_server import util


class PlaylistItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, owner_id: str=None, owner_name: str=None, creation_date: date=None, description: str=None, songs: List[SongItem]=None):  # noqa: E501
        """PlaylistItem - a model defined in Swagger

        :param id: The id of this PlaylistItem.  # noqa: E501
        :type id: str
        :param name: The name of this PlaylistItem.  # noqa: E501
        :type name: str
        :param owner_id: The owner_id of this PlaylistItem.  # noqa: E501
        :type owner_id: str
        :param owner_name: The owner_name of this PlaylistItem.  # noqa: E501
        :type owner_name: str
        :param creation_date: The creation_date of this PlaylistItem.  # noqa: E501
        :type creation_date: date
        :param description: The description of this PlaylistItem.  # noqa: E501
        :type description: str
        :param songs: The songs of this PlaylistItem.  # noqa: E501
        :type songs: List[SongItem]
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'owner_id': str,
            'owner_name': str,
            'creation_date': date,
            'description': str,
            'songs': List[SongItem]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'owner_id': 'ownerID',
            'owner_name': 'ownerName',
            'creation_date': 'creationDate',
            'description': 'description',
            'songs': 'songs'
        }

        self._id = id
        self._name = name
        self._owner_id = owner_id
        self._owner_name = owner_name
        self._creation_date = creation_date
        self._description = description
        self._songs = songs

    @classmethod
    def from_dict(cls, dikt) -> 'PlaylistItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlaylistItem of this PlaylistItem.  # noqa: E501
        :rtype: PlaylistItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PlaylistItem.


        :return: The id of this PlaylistItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PlaylistItem.


        :param id: The id of this PlaylistItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this PlaylistItem.


        :return: The name of this PlaylistItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PlaylistItem.


        :param name: The name of this PlaylistItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def owner_id(self) -> str:
        """Gets the owner_id of this PlaylistItem.


        :return: The owner_id of this PlaylistItem.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: str):
        """Sets the owner_id of this PlaylistItem.


        :param owner_id: The owner_id of this PlaylistItem.
        :type owner_id: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def owner_name(self) -> str:
        """Gets the owner_name of this PlaylistItem.


        :return: The owner_name of this PlaylistItem.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name: str):
        """Sets the owner_name of this PlaylistItem.


        :param owner_name: The owner_name of this PlaylistItem.
        :type owner_name: str
        """
        if owner_name is None:
            raise ValueError("Invalid value for `owner_name`, must not be `None`")  # noqa: E501

        self._owner_name = owner_name

    @property
    def creation_date(self) -> date:
        """Gets the creation_date of this PlaylistItem.


        :return: The creation_date of this PlaylistItem.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: date):
        """Sets the creation_date of this PlaylistItem.


        :param creation_date: The creation_date of this PlaylistItem.
        :type creation_date: date
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def description(self) -> str:
        """Gets the description of this PlaylistItem.


        :return: The description of this PlaylistItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PlaylistItem.


        :param description: The description of this PlaylistItem.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def songs(self) -> List[SongItem]:
        """Gets the songs of this PlaylistItem.


        :return: The songs of this PlaylistItem.
        :rtype: List[SongItem]
        """
        return self._songs

    @songs.setter
    def songs(self, songs: List[SongItem]):
        """Sets the songs of this PlaylistItem.


        :param songs: The songs of this PlaylistItem.
        :type songs: List[SongItem]
        """
        if songs is None:
            raise ValueError("Invalid value for `songs`, must not be `None`")  # noqa: E501

        self._songs = songs
